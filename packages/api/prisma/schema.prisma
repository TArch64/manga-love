generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("API_DATABASE_URL")
}

model DatabaseUser {
    id             String               @id @default(uuid())
    username       String               @db.VarChar(200) @unique
    email          String               @db.VarChar(200) @unique
    emailConfirmed Boolean              @default(false)
    password       String               @db.VarChar(200)
    actions        DatabaseUserAction[]
    avatarId       String               @unique
    avatar         DatabaseImage        @relation(fields: [avatarId], references: [id], onDelete: Cascade)
}

model DatabaseUserAction {
    id        String                 @id @default(uuid())
    code      String                 @db.VarChar(200) @unique @default(uuid())
    type      DatabaseUserActionType
    createdAt DateTime               @default(now())
    userId    String
    user      DatabaseUser           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DatabaseUserActionType {
    RESET_PASSWORD
    EMAIL_VERIFICATION
}

model DatabaseManga {
    id           String              @id @default(uuid())
    source       DatabaseMangaSource
    sourceId     String              @db.VarChar(200)
    createdAt    DateTime            @default(now())
    originalName String              @db.VarChar(200)
    uaName       String?             @db.VarChar(200)
    description  String
    type         DatabaseMangaType
    releaseDate  DateTime?           @db.Date
    finishDate   DateTime?           @db.Date
    posters      DatabaseImage[]

    @@unique([source, sourceId], name: "sourceIdentifier")
}

enum DatabaseMangaSource {
    KITSU
}

enum DatabaseMangaType {
    MANGA
    MANHUA
    MANHWA
}

model DatabaseImage {
    id               String         @id @default(uuid())
    originalSrc      String
    originalWidth    Int
    originalHeight   Int
    targetId         String?
    targetManga      DatabaseManga? @relation(fields: [targetId], references: [id], onDelete: Cascade)
    targetUserAvatar DatabaseUser?
}
